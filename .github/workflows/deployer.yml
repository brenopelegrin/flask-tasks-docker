name: deployer

on:
  push:
    branches:
      - 'master'
env:
  FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}
jobs:
  docker-push:
    runs-on: ubuntu-latest
    environment: production
    steps:
      -
        name: Checkout
        uses: actions/checkout@v3
      -
        name: Set up QEMU
        uses: docker/setup-qemu-action@v2
      -
        name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      -
        name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      -
        name: Build and push API
        uses: docker/build-push-action@v3
        with:
          context: ./api
          push: true
          tags: brenopelegrin/flask-tasks-api:latest
      -
        name: Build and push Handler
        uses: docker/build-push-action@v3
        with:
          context: ./handler
          push: true
          tags: brenopelegrin/flask-tasks-handler:latest
      -
        name: Build and push Janitor
        uses: docker/build-push-action@v3
        with:
          context: ./janitor
          push: true
          tags: brenopelegrin/flask-tasks-janitor:latest
  fly-deploy-api:
    name: Deploy API on Fly
    runs-on: ubuntu-latest
    needs: docker-push
    environment: production
    steps:
      - 
        name: Set up checkout
        uses: actions/checkout@v3
      - name: Set up flyctl
        uses: superfly/flyctl-actions/setup-flyctl@master
      - 
        name: Run flyctl deploy
        working-directory: ./api
        run: flyctl deploy --remote-only
  fly-deploy-handler:
    name: Deploy Handler on Fly
    runs-on: ubuntu-latest
    needs: docker-push
    environment: production
    steps:
      - 
        name: Set up checkout
        uses: actions/checkout@v3
      - name: Set up flyctl
        uses: superfly/flyctl-actions/setup-flyctl@master
      -           
        name: Run flyctl deploy
        working-directory: ./handler
        run: flyctl deploy --remote-only
          

